#!/usr/bin/env perl
use v5.36.0;
use strict;
use warnings;

use feature 'say';
use Mojo::UserAgent;
use Mojo::Promise;
use File::Basename;
use Path::Tiny;
use JSON::PP;
use Getopt::Long;
use Cwd 'abs_path';
use Config::Tiny;
use Try::Tiny;
use Const::Fast;

const my $CONF              => Config::Tiny->read(dirname(abs_path($0)) . '/configs/openwebui.ini');
const my $API_URL           => $CONF->{API}{api_url};
const my $HEADER            => {Authorization => "Bearer $CONF->{API}{token}"};
const my $KB_CHILDREN_LIMIT => 50;
my $ua = Mojo::UserAgent->new;

##
# main
##
sub parse_options {
    my %options;
    GetOptions(
        'd=s'   => \$options{dir_path},
        'kb=s'  => \$options{kb_name},
        'v'     => \$options{verbose}
    ) or die "Error: Usage: $0 -d <dir_path> --kb <knowledgebase_name> [-v]\n";

    die "err: dir path and knowledgebase name are required.\n" 
        unless $options{dir_path} && $options{kb_name};

    $options{dir_path} = abs_path($options{dir_path});
    die "err: dir '$options{dir_path}' does not exist.\n" 
        unless -d $options{dir_path};
    
    return \%options;
}

sub get_knowledgebase_uid {
    my ($kb_name, $debug) = @_;
    my $kb_uid      = _get_kb_uid($kb_name);
    if ( ! $kb_uid) {
        say "Knowledgebase '$kb_name' does not exist. Creating it.."        if $debug;
        $kb_uid     = _create_kb($kb_name);
        say "Created knowledgebase with ID: $kb_uid"                        if $debug;
    } else {
        say "Found knowledgebase with ID: $kb_uid, resyncing.."             if $debug;
        _reset_kb($kb_uid);
    }
    return $kb_uid;
}

sub collect_files {
    my ($dir, $debug) = @_;
    say "Collecting and flattening files from dir: $dir"                    if $debug;

    my $cmonkeyignore = path("$dir/.cmonkeyignore");
    my @ignore_patterns;
    if ($cmonkeyignore->exists) {
        @ignore_patterns = map { chomp; $_ } $cmonkeyignore->lines;
    }

    my $file_paths = _collect_files_bfs($dir, \@ignore_patterns, $debug);
    die "err: no files found in dir '$dir'\n"
        unless (@{$file_paths} && @{$file_paths} <= $KB_CHILDREN_LIMIT);

    return $file_paths;
}

sub upload_files {
    my ($file_paths, $kb_uid, $debug) = @_;
    say "\nStarting upload of " . scalar(@$file_paths) . " files..."        if $debug;
    
    my @promises;
    for my $path (@$file_paths) {
        push @promises, Mojo::Promise->new(sub {
            my ($resolve, $reject) = @_;
            _make_request(
                'post', 
                "files/", 
                $HEADER,
                {form => {file => {file => $path}}},
                sub {
                    my ($ua, $tx) = @_;
                    if ($tx->res->is_success) {
                        say "Successfully uploaded '$path'"                 if $debug;
                        my $file_id = decode_json($tx->res->body)->{id};
                        _add_file_to_kb($file_id, $kb_uid, $debug);
                        $resolve->(1);
                    } else {
                        warn "Failed to upload file '$path'";
                        $resolve->(undef);
                    }
                }
            );
        });
    }
    Mojo::Promise
        ->all(@promises)
        ->wait;
    return;
}

##
# helper
##
sub _make_request {
    my ($method, $endpoint, $headers, $data, $callback) = @_;

    my @args = ("$API_URL/$endpoint", $headers);
    push @args, %$data if $data;
    if ($callback) {
        push @args, $callback;
        $ua->$method(@args);
    } else {
        my $tx = $ua->$method(@args);
        return $tx->res->is_success
            ? (1, decode_json($tx->res->body))
            : (0, undef, "Error code: $tx->res->code, message: $tx->res->message, $tx->res->body");
    }
    return;
}

sub _get_kb_uid {
    my ($kb_name) = @_;
    my ($success, $data, $err) = _make_request('get', "knowledge/", $HEADER);
    die "Failed to get all kb ids: $err" 
        unless $success;
    for my $kb (@$data) {
        return $kb->{id} if $kb->{name} eq $kb_name;
    }
    return;
}

sub _create_kb {
    my ($kb_name) = @_;
    my ($success, $data, $err) = _make_request(
        'post', 
        "knowledge/create", 
        $HEADER,
        {
            json => {
                name => $kb_name,
                description => $kb_name,
                access_control  => undef,
            }
        });
    die "Failed to create '$kb_name': $err" 
        unless $success;
    return $data->{id};
}

sub _reset_kb {
    my ($kb_id) = @_;
    my ($success, $data, $err) = _make_request('post', "knowledge/$kb_id/reset", $HEADER);
    die "Failed to reset '$kb_id': $err" 
        unless $success;
    return $success;
}

sub _add_file_to_kb {
    my ($file_id, $kb_id, $debug) = @_;
    try {
        my ($success, $data, $err) = _make_request(
                'post', 
                "knowledge/$kb_id/file/add", 
                $HEADER,
                {json => {file_id => $file_id}}
            );
        warn "Could not add file id '$file_id' to knowledge base '$kb_id': $err" 
            unless $success;
        say "\t...added to kb $kb_id" if $success && $debug;
    } catch {
        warn "Fatal error while adding file id '$file_id' to knowledge base '$kb_id'.";
    }
}

sub _collect_files_bfs {
    my ($dir, $ignore_patterns, $debug) = @_;
    my @queue = (path($dir));

    my @files;
    while (@queue) {
        my $current_path = shift @queue;
        next if grep { $current_path =~ /$_/ } @{$ignore_patterns};

        if ($current_path->is_file) {
            push @files, $current_path->stringify;
            say "\t.." . substr($current_path, length($dir))                if $debug;
        }
        elsif ($current_path->is_dir) {
            push @queue, $current_path->children;
        }
    }
    return \@files;
}

##
# Exec
##
try {
    my $opt         = parse_options();
    my $kb_uid      = get_knowledgebase_uid($opt->{kb_name}, $opt->{verbose});
    my $file_paths  = collect_files($opt->{dir_path}, $opt->{verbose});
    upload_files($file_paths, $kb_uid, $opt->{verbose});
    say "\nok."                                                             if $opt->{verbose};
} catch {
    die "Fatal: $_";
};